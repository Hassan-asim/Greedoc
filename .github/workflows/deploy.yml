name: Deploy to Google Cloud Run and Firebase Hosting

on:
  push:
    branches: [ main, frontend ]
  pull_request:
    branches: [ main, frontend ]

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install backend dependencies
        run: |
          cd server
          npm ci

      - name: Build backend
        run: |
          cd server
          npm run build

      - name: Setup Google Cloud CLI
        run: |
          echo "Checking if secret exists..."
          if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
            echo "ERROR: GCP_SA_KEY secret is empty or not set"
            exit 1
          fi
          echo "Secret exists, writing to file..."
          echo '${{ secrets.GCP_SA_KEY }}' > /tmp/greedoc-deploy-key.json
          echo "File written, checking content..."
          head -c 100 /tmp/greedoc-deploy-key.json
          echo "Authenticating..."
          gcloud auth activate-service-account --key-file=/tmp/greedoc-deploy-key.json
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

      - name: Build and Push Docker Image
        run: |
          # Build Docker image
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/greedoc-backend:latest ./server
          
          # Configure Docker to use gcloud as a credential helper
          gcloud auth configure-docker
          
          # Push image to Google Container Registry
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/greedoc-backend:latest

      - name: Deploy to Google Cloud Run
        run: |
          gcloud run deploy greedoc-backend \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/greedoc-backend:latest \
            --region us-central1 \
            --platform managed \
            --allow-unauthenticated \
            --port 5000 \
            --memory 1Gi \
            --cpu 1 \
            --max-instances 10 \
            --set-env-vars NODE_ENV=production,FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }},FIREBASE_PRIVATE_KEY_ID=${{ secrets.FIREBASE_PRIVATE_KEY_ID }},FIREBASE_PRIVATE_KEY="${{ secrets.FIREBASE_PRIVATE_KEY }}",FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }},FIREBASE_CLIENT_ID=${{ secrets.FIREBASE_CLIENT_ID }},FIREBASE_AUTH_URI=${{ secrets.FIREBASE_AUTH_URI }},FIREBASE_TOKEN_URI=${{ secrets.FIREBASE_TOKEN_URI }},FIREBASE_AUTH_PROVIDER_X509_CERT_URL=${{ secrets.FIREBASE_AUTH_PROVIDER_X509_CERT_URL }},FIREBASE_CLIENT_X509_CERT_URL=${{ secrets.FIREBASE_CLIENT_X509_CERT_URL }},JWT_SECRET=${{ secrets.JWT_SECRET }},JWT_EXPIRE=7d,OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},GLM_API_KEY=${{ secrets.GLM_API_KEY }},GROQ_API_KEY=${{ secrets.GROQ_API_KEY }},CLIENT_URL=${{ secrets.CLIENT_URL }},RATE_LIMIT_WINDOW_MS=900000,RATE_LIMIT_MAX_REQUESTS=100,MAX_FILE_SIZE=5242880,UPLOAD_PATH=./uploads,BCRYPT_ROUNDS=12,NOTIFICATION_INTERVAL_MS=300000,NOTIFICATION_ADVANCE_MINUTES=30,AI_REQUEST_TIMEOUT_MS=60000

  deploy-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd client
          npm ci

      - name: Build frontend
        run: |
          cd client
          npm run build:prod
        env:
          CI: false
          SKIP_PREFLIGHT_CHECK: true
          GENERATE_SOURCEMAP: false
          VITE_API_URL: ${{ secrets.CLIENT_URL }}

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          channelId: live
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}
